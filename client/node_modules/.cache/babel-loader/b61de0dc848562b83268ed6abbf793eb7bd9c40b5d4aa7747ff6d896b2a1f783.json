{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const apiService = {\n  // Catégories\n  async getCategories() {\n    const response = await fetch(`${API_BASE_URL}/categories`);\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Erreur lors du chargement des catégories: ${response.status} - ${errorText}`);\n    }\n    return response.json();\n  },\n  // Produits\n  async getProducts() {\n    const response = await fetch(`${API_BASE_URL}/products`);\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Erreur lors du chargement des produits: ${response.status} - ${errorText}`);\n    }\n    return response.json();\n  },\n  // Produit par ID\n  async getProductById(id) {\n    const response = await fetch(`${API_BASE_URL}/products/${id}`);\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Produit non trouvé: ${response.status} - ${errorText}`);\n    }\n    return response.json();\n  },\n  // Catégorie par slug\n  async getCategoryBySlug(slug) {\n    try {\n      const response = await fetch(`${API_URL}/categories/slug/${slug}`);\n      if (!response.ok) {\n        throw new Error(`Catégorie \"${slug}\" non trouvée`);\n      }\n      const data = await response.json();\n      // Retourne { category, products }\n      return data;\n    } catch (error) {\n      console.error(`Erreur lors du chargement de la catégorie ${slug}:`, error);\n      throw error;\n    }\n  },\n  // Produits par catégorie\n  async getProductsByCategory(categoryId) {\n    const response = await fetch(`${API_BASE_URL}/products?category=${categoryId}`);\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Erreur produits par catégorie: ${response.status} - ${errorText}`);\n    }\n    return response.json();\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiService","getCategories","response","fetch","ok","errorText","text","Error","status","json","getProducts","getProductById","id","getCategoryBySlug","slug","API_URL","data","error","console","getProductsByCategory","categoryId"],"sources":["C:/M2PDAM/marketing digital/Angels_Bags/client/src/services/apiService.ts"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport const apiService = {\r\n  // Catégories\r\n  async getCategories() {\r\n    const response = await fetch(`${API_BASE_URL}/categories`);\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Erreur lors du chargement des catégories: ${response.status} - ${errorText}`);\r\n    }\r\n    return response.json();\r\n  },\r\n\r\n  // Produits\r\n  async getProducts() {\r\n    const response = await fetch(`${API_BASE_URL}/products`);\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Erreur lors du chargement des produits: ${response.status} - ${errorText}`);\r\n    }\r\n    return response.json();\r\n  },\r\n\r\n  // Produit par ID\r\n  async getProductById(id: string) {\r\n    const response = await fetch(`${API_BASE_URL}/products/${id}`);\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Produit non trouvé: ${response.status} - ${errorText}`);\r\n    }\r\n    return response.json();\r\n  },\r\n\r\n  // Catégorie par slug\r\n   async getCategoryBySlug(slug : string) {\r\n    try {\r\n      const response = await fetch(`${API_URL}/categories/slug/${slug}`);\r\n      if (!response.ok) {\r\n        throw new Error(`Catégorie \"${slug}\" non trouvée`);\r\n      }\r\n      const data = await response.json();\r\n      // Retourne { category, products }\r\n      return data;\r\n    } catch (error) {\r\n      console.error(`Erreur lors du chargement de la catégorie ${slug}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Produits par catégorie\r\n  async getProductsByCategory(categoryId: string) {\r\n    const response = await fetch(`${API_BASE_URL}/products?category=${categoryId}`);\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Erreur produits par catégorie: ${response.status} - ${errorText}`);\r\n    }\r\n    return response.json();\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,OAAO,MAAMC,UAAU,GAAG;EACxB;EACA,MAAMC,aAAaA,CAAA,EAAG;IACpB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,aAAa,CAAC;IAC1D,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,6CAA6CL,QAAQ,CAACM,MAAM,MAAMH,SAAS,EAAE,CAAC;IAChG;IACA,OAAOH,QAAQ,CAACO,IAAI,CAAC,CAAC;EACxB,CAAC;EAED;EACA,MAAMC,WAAWA,CAAA,EAAG;IAClB,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,WAAW,CAAC;IACxD,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,2CAA2CL,QAAQ,CAACM,MAAM,MAAMH,SAAS,EAAE,CAAC;IAC9F;IACA,OAAOH,QAAQ,CAACO,IAAI,CAAC,CAAC;EACxB,CAAC;EAED;EACA,MAAME,cAAcA,CAACC,EAAU,EAAE;IAC/B,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,aAAagB,EAAE,EAAE,CAAC;IAC9D,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,MAAMH,SAAS,EAAE,CAAC;IAC1E;IACA,OAAOH,QAAQ,CAACO,IAAI,CAAC,CAAC;EACxB,CAAC;EAED;EACC,MAAMI,iBAAiBA,CAACC,IAAa,EAAE;IACtC,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGY,OAAO,oBAAoBD,IAAI,EAAE,CAAC;MAClE,IAAI,CAACZ,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIG,KAAK,CAAC,cAAcO,IAAI,eAAe,CAAC;MACpD;MACA,MAAME,IAAI,GAAG,MAAMd,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC;MACA,OAAOO,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6CH,IAAI,GAAG,EAAEG,KAAK,CAAC;MAC1E,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAME,qBAAqBA,CAACC,UAAkB,EAAE;IAC9C,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,sBAAsBwB,UAAU,EAAE,CAAC;IAC/E,IAAI,CAAClB,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,kCAAkCL,QAAQ,CAACM,MAAM,MAAMH,SAAS,EAAE,CAAC;IACrF;IACA,OAAOH,QAAQ,CAACO,IAAI,CAAC,CAAC;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}